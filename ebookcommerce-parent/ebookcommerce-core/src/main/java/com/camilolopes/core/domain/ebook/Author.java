package com.camilolopes.core.domain.ebook;

// Generated 27/09/2013 20:41:08 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.validator.constraints.Email;

/**
 * Author generated by hbm2java
 */
@Entity
@Table(name = "author")
public class Author implements java.io.Serializable {

	private static final long serialVersionUID = 1098305246259519582L;
	private int id;
	private String name;
	private String lastname;
	private String email;
	private String repoUrl;
	private String twitter;
	private String site;
	private String nameEditor;
	private String photo;
	private String cv;
	private Set<Ebook> ebooks = new HashSet<Ebook>();

	public Author() {
	}

	public Author(int id) {
		this.id = id;
	}

	public Author(int id, String name, String lastname, String email,
			String repoUrl, String twitter, String site, String nameEditor,
			String photo, String cv, Set<Ebook> ebooks) {
		this.id = id;
		this.name = name;
		this.lastname = lastname;
		this.email = email;
		this.repoUrl = repoUrl;
		this.twitter = twitter;
		this.site = site;
		this.nameEditor = nameEditor;
		this.photo = photo;
		this.cv = cv;
		this.ebooks = ebooks;
	}

	@Id
	@GeneratedValue
	@Column(name = "ID", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	@NotNull
	@Column(name = "NAME", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	@Column(name = "LASTNAME", length = 45)
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}
	@NotNull
	@Email
	@Column(name = "EMAIL", length = 45,unique=true)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "REPO_URL", length = 80)
	public String getRepoUrl() {
		return this.repoUrl;
	}

	public void setRepoUrl(String repoUrl) {
		this.repoUrl = repoUrl;
	}

	@Column(name = "TWITTER", length = 45)
	public String getTwitter() {
		return this.twitter;
	}

	public void setTwitter(String twitter) {
		this.twitter = twitter;
	}

	@Column(name = "SITE", length = 80)
	public String getSite() {
		return this.site;
	}

	public void setSite(String site) {
		this.site = site;
	}
	@NotNull
	@Column(name = "NAME_EDITOR",nullable=false)
	public String getNameEditor() {
		return this.nameEditor;
	}

	public void setNameEditor(String nameEditor) {
		this.nameEditor = nameEditor;
	}
	@NotNull
	@Column(name = "PHOTO", length = 45)
	public String getPhoto() {
		return this.photo;
	}

	public void setPhoto(String photo) {
		this.photo = photo;
	}
	@NotNull
	@Column(name = "CV", length = 65535)
	public String getCv() {
		return this.cv;
	}

	public void setCv(String cv) {
		this.cv = cv;
	}
	@JsonIgnore
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ebook_has_author", 
	joinColumns = { @JoinColumn(name = "Author_ID", nullable = false, updatable = false) },
	inverseJoinColumns = { @JoinColumn(name = "ebook_id", nullable = false, updatable = false) })
	public Set<Ebook> getEbooks() {
		return this.ebooks;
	}

	public void setEbooks(Set<Ebook> ebooks) {
		this.ebooks = ebooks;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cv == null) ? 0 : cv.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + id;
		result = prime * result
				+ ((lastname == null) ? 0 : lastname.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result
				+ ((nameEditor == null) ? 0 : nameEditor.hashCode());
		result = prime * result + ((photo == null) ? 0 : photo.hashCode());
		result = prime * result + ((repoUrl == null) ? 0 : repoUrl.hashCode());
		result = prime * result + ((site == null) ? 0 : site.hashCode());
		result = prime * result + ((twitter == null) ? 0 : twitter.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Author))
			return false;
		Author other = (Author) obj;
		if (cv == null) {
			if (other.cv != null)
				return false;
		} else if (!cv.equals(other.cv))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (id != other.id)
			return false;
		if (lastname == null) {
			if (other.lastname != null)
				return false;
		} else if (!lastname.equals(other.lastname))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (nameEditor == null) {
			if (other.nameEditor != null)
				return false;
		} else if (!nameEditor.equals(other.nameEditor))
			return false;
		if (photo == null) {
			if (other.photo != null)
				return false;
		} else if (!photo.equals(other.photo))
			return false;
		if (repoUrl == null) {
			if (other.repoUrl != null)
				return false;
		} else if (!repoUrl.equals(other.repoUrl))
			return false;
		if (site == null) {
			if (other.site != null)
				return false;
		} else if (!site.equals(other.site))
			return false;
		if (twitter == null) {
			if (other.twitter != null)
				return false;
		} else if (!twitter.equals(other.twitter))
			return false;
		return true;
	}

	

}
