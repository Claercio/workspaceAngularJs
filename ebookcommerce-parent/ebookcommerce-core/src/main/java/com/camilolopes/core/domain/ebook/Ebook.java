package com.camilolopes.core.domain.ebook;

// Generated 28/08/2013 22:54:32 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

import org.codehaus.jackson.annotate.JsonProperty;
import org.hibernate.validator.constraints.NotEmpty;

import com.camilolopes.core.enums.ebook.Status;

/**
 * Ebook generated by hbm2java
 */
@Entity
@Table(name = "ebook",  uniqueConstraints = @UniqueConstraint(columnNames = "title"))
public class Ebook implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5669786735145459922L;
	private long id;
	
	private Status status;
	private String title;
	private String summaryFile;
	private String description;
	private BigDecimal price;
	private String cover;
	private int yearPublish;
	private CategoryEbook categoryEbook;
	private String saleUrl;
	private String isbn;
	private int totalPage;
	private int editionNumber;
	
	@NotEmpty
	private Set<TypeEbook> typeEbooks = new HashSet<TypeEbook>();

	@NotEmpty
	private Set<Author> authors;


	public Ebook() {
	}

	public Ebook(String title, Status status, String summaryFile, String description,
			BigDecimal price, String cover, int yearPublish) {
		this.title = title;
		this.status = status;
		this.summaryFile = summaryFile;
		this.description = description;
		this.price = price;
		this.cover = cover;
		this.yearPublish = yearPublish;
	}

	public Ebook(String title, Status status, String summaryFile, String description,
			BigDecimal price, String cover, int yearPublish,
			Set<TypeEbook> typeEbooks) {
		this.title = title;
		this.status = status;
		this.summaryFile = summaryFile;
		this.description = description;
		this.price = price;
		this.cover = cover;
		this.yearPublish = yearPublish;
		this.typeEbooks = typeEbooks;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Enumerated(EnumType.STRING)
	@Column(name = "status", unique = false, nullable = false)
	public Status getStatus() {
		return status;
	}
	
	public void setStatus(Status status) {
		this.status = status;
	}
	
	@Column(name = "title", unique = true, nullable = false, length = 75)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	
	@Column(name = "description", nullable = false, length = 500)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "price", nullable = false, precision = 10)
	public BigDecimal getPrice() {
		return this.price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	@Column(name = "cover", nullable = false, length = 45)
	public String getCover() {
		return this.cover;
	}

	public void setCover(String cover) {
		this.cover = cover;
	}

	@Column(name = "year_publish", nullable = false)
	public int getYearPublish() {
		return this.yearPublish;
	}

	public void setYearPublish(int yearPublish) {
		this.yearPublish = yearPublish;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ebook_has_type_ebook",
	joinColumns = { @JoinColumn(name = "ebook_id", nullable = false, updatable = false) }, 
	inverseJoinColumns = { @JoinColumn(name = "type_ebook_id", nullable = false, updatable = false) })
	public Set<TypeEbook> getTypeEbooks() {
		return this.typeEbooks;
	}

	public void setTypeEbooks(Set<TypeEbook> typeEbooks) {
		this.typeEbooks = typeEbooks;
	}

	@NotNull
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "category_ebook_id", nullable = false,insertable = true,updatable = true)
	public CategoryEbook getCategoryEbook() {
		return categoryEbook;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ebook_has_author",  joinColumns = { @JoinColumn(name = "ebook_id", nullable = false, updatable = false) }, 
	inverseJoinColumns = { @JoinColumn(name = "Author_ID", nullable = false, updatable = false) })
	public Set<Author> getAuthors() {
		return this.authors;
	}

	public void setAuthors(Set<Author> authors) {
		this.authors = authors;
	}
	
	public void setCategoryEbook(CategoryEbook categoryEbook) {
		this.categoryEbook = categoryEbook;
	}
	@Column(name = "summary_file")
	public String getSummaryFile() {
		return summaryFile;
	}

	public void setSummaryFile(String summaryFile) {
		this.summaryFile = summaryFile;
	}
	@Column(name = "sale_url")
	public String getSaleUrl() {
		return saleUrl;
	}

	public void setSaleUrl(String saleUrl) {
		this.saleUrl = saleUrl;
	}

	@Column
	@JsonProperty("isbn")
	public String getIsbn() {
		return isbn;
	}

	@JsonProperty("isbn")
	public void setIsbn(String ISBN) {
		this.isbn = ISBN;
	}

	public int getTotalPage() {
		return totalPage;
	}

	public void setTotalPage(int totalPage) {
		this.totalPage = totalPage;
	}

	public int getEditionNumber() {
		return editionNumber;
	}

	public void setEditionNumber(int editionNumber) {
		this.editionNumber = editionNumber;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((isbn == null) ? 0 : isbn.hashCode());
		result = prime * result + ((cover == null) ? 0 : cover.hashCode());
		result = prime * result
				+ ((description == null) ? 0 : description.hashCode());
		result = prime * result + editionNumber;
		result = prime * result + (int) (id ^ (id >>> 32));
		result = prime * result + ((price == null) ? 0 : price.hashCode());
		result = prime * result + ((saleUrl == null) ? 0 : saleUrl.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result
				+ ((summaryFile == null) ? 0 : summaryFile.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + totalPage;
		result = prime * result + yearPublish;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Ebook))
			return false;
		Ebook other = (Ebook) obj;
		if (isbn == null) {
			if (other.isbn != null)
				return false;
		} else if (!isbn.equals(other.isbn))
			return false;
		if (cover == null) {
			if (other.cover != null)
				return false;
		} else if (!cover.equals(other.cover))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (editionNumber != other.editionNumber)
			return false;
		if (id != other.id)
			return false;
		if (price == null) {
			if (other.price != null)
				return false;
		} else if (!price.equals(other.price))
			return false;
		if (saleUrl == null) {
			if (other.saleUrl != null)
				return false;
		} else if (!saleUrl.equals(other.saleUrl))
			return false;
		if (status != other.status)
			return false;
		if (summaryFile == null) {
			if (other.summaryFile != null)
				return false;
		} else if (!summaryFile.equals(other.summaryFile))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (totalPage != other.totalPage)
			return false;
		if (yearPublish != other.yearPublish)
			return false;
		return true;
	}

}